---
interface Props {
  headings: Array<{
    id: string;
    text: string;
    level: number;
  }>;
}

const { headings } = Astro.props;
---

<div class="table-of-contents">
  <div class="toc-header">
    <h3 class="toc-title">Table of Contents</h3>
  </div>
  <nav class="toc-nav">
    <ul class="toc-list">
      {
        headings.map((heading) => (
          <li class={`toc-item toc-level-${heading.level}`}>
            <a
              href={`#${heading.id}`}
              class="toc-link"
              data-heading-id={heading.id}
            >
              {heading.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<style>
  .table-of-contents {
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow:
      0 1px 3px 0 rgba(0, 0, 0, 0.1),
      0 1px 2px 0 rgba(0, 0, 0, 0.06);
    width: 280px;
    margin-right: 2rem;
  }

  .dark .table-of-contents {
    background: #1f2937;
    border-color: #374151;
    color: #f9fafb;
  }

  .toc-header {
    margin-bottom: 1rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #e5e7eb;
  }

  .dark .toc-header {
    border-bottom-color: #374151;
  }

  .toc-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin: 0;
  }

  .dark .toc-title {
    color: #f9fafb;
  }

  .toc-nav {
    font-size: 0.875rem;
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-item {
    margin-bottom: 0.5rem;
  }

  .toc-link {
    display: block;
    padding: 0.375rem 0.75rem;
    color: #6b7280;
    text-decoration: none;
    border-radius: 0.375rem;
    transition: all 0.2s ease-in-out;
    border-left: 2px solid transparent;
  }

  .toc-link:hover {
    color: #374151;
    background-color: #f3f4f6;
  }

  .dark .toc-link {
    color: #9ca3af;
  }

  .dark .toc-link:hover {
    color: #d1d5db;
    background-color: #374151;
  }

  .toc-link.active {
    color: #2563eb;
    background-color: #eff6ff;
    border-left-color: #2563eb;
    font-weight: 500;
  }

  .dark .toc-link.active {
    color: #60a5fa;
    background-color: #1e3a8a;
    border-left-color: #60a5fa;
  }

  .toc-level-1 {
    margin-left: 0;
  }

  .toc-level-2 {
    margin-left: 1rem;
  }

  .toc-level-3 {
    margin-left: 2rem;
  }

  .toc-level-4 {
    margin-left: 3rem;
  }

  @media (max-width: 1024px) {
    .table-of-contents {
      position: static;
      width: 100%;
      margin-right: 0;
      margin-bottom: 2rem;
      max-height: none;
    }
  }
</style>

<script>
  // 平滑滚动到目标位置
  function smoothScrollTo(targetId: string) {
    const target = document.getElementById(targetId);
    if (target) {
      target.scrollIntoView({
        behavior: "smooth",
        block: "start",
      });
    }
  }

  // 更新活动链接
  function updateActiveLink() {
    const headings = document.querySelectorAll("h2, h3, h4, h5, h6");
    const tocLinks = document.querySelectorAll(".toc-link");

    let currentHeading = "";

    headings.forEach((heading) => {
      const rect = heading.getBoundingClientRect();
      if (rect.top <= 100) {
        currentHeading = heading.id;
      }
    });

    tocLinks.forEach((link) => {
      link.classList.remove("active");
      if (link.getAttribute("href") === `#${currentHeading}`) {
        link.classList.add("active");
      }
    });
  }

  // 初始化
  document.addEventListener("DOMContentLoaded", () => {
    const tocLinks = document.querySelectorAll(".toc-link");

    tocLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const targetId = link.getAttribute("href")?.replace("#", "");
        if (targetId) {
          smoothScrollTo(targetId);
        }
      });
    });

    // 监听滚动事件
    window.addEventListener("scroll", updateActiveLink);

    // 初始化活动状态
    updateActiveLink();
  });
</script>

